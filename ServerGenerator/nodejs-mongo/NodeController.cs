
using System.Xml.Linq;

namespace ServerGenerator.nodejs
{
    internal class NodeController : Controller
    {
        public override bool Generate()
        {
            string upperName = Utils.CapitalizeFirstLetter(Model.Name);
            string lowerName = Model.Name.ToLower();

            string controllerCode = "// this file generated by shlmt/ServerGenerator\r\n" +
                "\r\n" +
                $"const {upperName} = require(\"../models/{lowerName}\")\r\n" +
                "\r\n" +

                $"const create{upperName} = async (req, res) => {{\r\n" +
                "\ttry {\r\n" +
                $"\t\tconst {{{lowerName}}} = req.body\r\n" +
                $"\t\tconst new{upperName} = await {upperName}.create({lowerName})\r\n" +
                $"\t\tif (!new{upperName})\r\n" +
                $"\t\t\treturn res.status(400).json({{message: 'invalid {lowerName}'}})\r\n" +
                $"\t\tres.status(201).json({{new{upperName}}})\r\n" +
                "\t} catch (ex) {\r\n" +
                "\t\tres.status(500).json({message: ex.message})\r\n" +
                "\t}\r\n" +
                "}\r\n\r\n" +

                $"const getAll{upperName}s = async (req, res) => {{\r\n" +
                "\ttry {\r\n" +
                $"\t\tconst {lowerName}s = await {upperName}.find().lean()\r\n" +
                $"\t\tif (!{lowerName}s)\r\n" +
                $"\t\t\treturn res.status(404).json('{upperName}s error')\r\n" +
                $"\t\tres.status(200).json({lowerName}s)\r\n" +
                "\t} catch (ex) {\r\n" +
                "\t\tres.status(500).json({message: ex.message})\r\n" +
                "\t}\r\n" +
                "}\r\n\r\n" +

                $"const get{upperName}ById = async (req, res) => {{\r\n" +
                "\ttry {\r\n" +
                "\t\tconst id = req.params.id\r\n" +
                $"\t\tconst {lowerName} = await {upperName}.findById(id).lean()\r\n" +
                $"\t\tif (!{lowerName})\r\n" +
                $"\t\t\treturn res.status(404).json({{message: '{lowerName} not found'}})\r\n" +
                $"\t\tres.status(200).json({lowerName})\r\n" +
                "\t} catch (ex) {\r\n" +
                "\t\tres.status(500).json({message: ex.message})\r\n" +
                "\t}\r\n" +
                "}\r\n\r\n" +

                $"const update{upperName} = async (req, res) => {{\r\n" +
                "\ttry {\r\n" +
                "\t\tconst {id} = req.params\r\n" +
                $"\t\tconst {{{lowerName}}} = req.body\r\n" +
                $"\t\tconst exist{upperName} = await {upperName}.findById(id).exec()\r\n" +
                $"\t\tif (!exist{upperName})\r\n" +
                $"\t\t\treturn res.status(404).json({{message: '{lowerName} not found'}})\r\n" +
                "\t\tconst excludeKeys = ['_id', 'createdAt', 'updatedAt', '__v']\r\n" +
                $"\t\tObject.keys({lowerName}).forEach((key) => {{\r\n" +
                "\t\t\tif (!excludeKeys.includes(key)) {\r\n" +
                $"\t\t\t\texist{upperName}[key] = {lowerName}[key]\r\n" +
                "\t\t\t}\r\n" +
                "\t\t})\r\n" +
                $"\t\tconst updated{upperName} = await exist{upperName}.save()\r\n" +
                $"\t\tres.status(200).json({{updated{upperName}}})\r\n" +
                "\t} catch (ex) {\r\n" +
                "\t\tres.status(500).json({message: ex.message})\r\n" +
                "\t}\r\n" +
                "}\r\n\r\n" +

                $"const delete{upperName} = async (req, res) => {{\r\n" +
                "\ttry {\r\n" +
                "\t\tconst {id} = req.params\r\n" +
                $"\t\tconst {lowerName} = await {upperName}.findById(id).exec()\r\n" +
                $"\t\tif (!{lowerName})\r\n" +
                $"\t\t\treturn res.status(400).json({{message: '{lowerName} not found'}})\r\n" +
                $"\t\tconst result = await {lowerName}.deleteOne()\r\n" +
                "\t\tres.status(204).send()\r\n" +
                "\t} catch (ex) {\r\n" +
                "\t\tres.status(500).json({message: ex.message})\r\n" +
                "\t}\r\n" +
                "}\r\n\r\n"+

                $"module.exports = {{create{upperName} ,getAll{upperName}s ,get{upperName}ById ,update{upperName} ,delete{upperName}}}";

                return Utils.CreateFile(Path.Combine(ProjectInfo.RootDirectory, ProjectInfo.ProjectName, "controllers", Model.Name + "Controller.js"), controllerCode, "controllers/" + Model.Name + "Controller.js");
        }
    }
}
