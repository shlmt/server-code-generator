namespace ServerGenerator.minimal
{
    internal class MinNetServer : Server
    {
        public override bool Generate()
        {
            string routesCode = "//routes\r\n";

            if(Models.Length > 1)
            {
                Console.WriteLine("generally minimal api has just one model");
            }
            foreach (Model model in Models)
            {
                string upperName = Utils.CapitalizeFirstLetter(model.Name);
                string lowerName = model.Name.ToLower();

                routesCode += $"// {model.Name}\r\n"+
                    $"app.MapGet(\"/{lowerName}\", async ({ProjectInfo.ProjectName}DbContext dbContext) =>  {{\r\n" +
                    $"\tvar {lowerName}s = await dbContext.{upperName}s.ToListAsync();\r\n" +
                    $"\tif ({lowerName}s == null) \r\n" +
                    $"\t\treturn Results.NotFound(\"No {lowerName}s found.\");\r\n" +
                    $"\treturn Results.Ok({lowerName}s);\r\n}}" +
                    ");\r\n" +
                    "\r\n" +
                    $"app.MapPost(\"/{lowerName}\", async ({ProjectInfo.ProjectName}DbContext dbContext, {upperName} {lowerName}) => {{\r\n" +
                    $"\tif ({lowerName} == null) return Results.BadRequest(\"{upperName} cannot be null.\");\r\n" +
                    //$"\tif ({lowerName}.Name == null) return Results.BadRequest(\"fields cannot be null.\");\r\n" +
                    $"\tawait dbContext.{upperName}s.AddAsync({lowerName});\r\n" +
                    "\tawait dbContext.SaveChangesAsync();\r\n" +
                    $"\tvar created{upperName} = await dbContext.{upperName}s.FindAsync({lowerName}.Id);\r\n" +
                    $"\tif (created{upperName} == null) return Results.Problem(\"Failed to retrieve the created {lowerName}.\");\r\n" +
                    $"\treturn Results.Created(\"created\", created{upperName});\r\n" +
                    "});\r\n" +
                    "\r\n" +
                    $"app.MapPut(\"/{lowerName}/{{id}}\", async ({ProjectInfo.ProjectName}DbContext dbContext, int id, {upperName} new{upperName}) => {{\r\n" +
                    $"\tvar {lowerName} = await dbContext.{upperName}s.FindAsync(id);\r\n" +
                    $"\tif ({lowerName} == null) return Results.NotFound($\"{upperName} with ID {{id}} not found.\");\r\n" +
                    $"\t{lowerName} = new{upperName};\r\n" +
                    "\tawait dbContext.SaveChangesAsync();\r\n" +
                    $"\treturn Results.Ok({lowerName});\r\n" +
                    "});\r\n" +
                    "\r\n" +
                    $"app.MapDelete(\"/{lowerName}/{{id}}\", async ({ProjectInfo.ProjectName}DbContext dbContext, int id) => {{\r\n" +
                    $"\tvar {lowerName} = await dbContext.{upperName}s.FindAsync(id);\r\n" +
                    $"\tif ({lowerName} == null) return Results.NotFound();\r\n" +
                    $"\tdbContext.{upperName}s.Remove({lowerName});\r\n" +
                    "\tawait dbContext.SaveChangesAsync();\r\n" +
                    "\treturn Results.NoContent();\r\n" +
                    "});\r\n";
            }

            string serverCode = "// this file generated by shlmt/ServerGenerator\r\n" +
                "\r\n"+
                "using Microsoft.AspNetCore.Mvc;\r\n" +
                "using Microsoft.EntityFrameworkCore;\r\n" +
                $"using {ProjectInfo.ProjectName};\r\n" +
                "\r\n" +
                "var builder = WebApplication.CreateBuilder(args);\r\n" +
                "\r\n" +
                "builder.Services.AddCors(options =>\r\n" +
                "{\r\n" +
                "\toptions.AddPolicy(\"AllowAll\", builder =>\r\n" +
                "" +
                "\t{\r\n" +
                "\t\tbuilder.AllowAnyOrigin()\r\n" +
                "\t\t\t\t.AllowAnyHeader()\r\n" +
                "\t\t\t\t.AllowAnyMethod();\r\n" +
                "\t});" +
                "\r\n});" +
                "\r\n" +
                "\r\n" +
                $"builder.Services.AddDbContext<{ProjectInfo.ProjectName}DbContext>(options =>\r\n" +
                "\toptions.UseMySql(\r\n" +
                "\t\tbuilder.Configuration.GetConnectionString(\"db\"),\r\n" +
                "\t\tMicrosoft.EntityFrameworkCore.ServerVersion.Parse(\"8.0.40-mysql\")\r\n" +
                "\t));\r\n" +
                "\r\n" +
                "builder.Services.AddEndpointsApiExplorer(); \r\n" +
                "builder.Services.AddSwaggerGen(); \r\n" +
                "\r\n" +
                "var app = builder.Build();\r\n" +
                "app.UseCors(\"AllowAll\");\r\n" +
                "\r\n" +
                "if (app.Environment.IsDevelopment())\r\n" +
                "{\r\n" +
                "\tapp.UseSwagger();\r\n" +
                "\tapp.UseSwaggerUI();\r\n" +
                "}\r\n" +
                "\r\n" +
                $"{routesCode}\r\n" +
                "app.Run();";

            string appSettingsCode = "// this file generated by shlmt/ServerGenerator\r\n" +
                "\r\n" +
                "{\r\n" +
                "  \"Logging\": {\r\n" +
                "    \"LogLevel\": {\r\n" +
                "      \"Default\": \"Information\",\r\n" +
                "      \"Microsoft.AspNetCore\": \"Warning\"\r\n" +
                "    }\r\n" +
                "  },\r\n" +
                "  \"AllowedHosts\": \"*\",\r\n" +
                "  \"ConnectionStrings\":{\r\n" +
                $"    \"db\": \"{DataBaseURL}\" \r\n" +
                "  } \r\n" +
                "}\r\n";

            try
            {
                string directoryPath = Path.Combine(ProjectInfo.RootDirectory, ProjectInfo.ProjectName);

                if(!Utils.RunCommand("dotnet", $"new web -o {ProjectInfo.ProjectName}", ProjectInfo.RootDirectory)){
                    Console.WriteLine("can't continue if project not created successfully");
                    return false;
                };

                Utils.RunCommand("dotnet", "add package Microsoft.EntityFrameworkCore --version 8.0.0", directoryPath);
                Utils.RunCommand("dotnet", "add package Microsoft.EntityFrameworkCore.Design --version 8.0.0", directoryPath);
                Utils.RunCommand("dotnet", "add package Pomelo.EntityFrameworkCore.MySql --version 8.0.0", directoryPath);
                Utils.RunCommand("dotnet", "add package Microsoft.EntityFrameworkCore.Tools --version 8.0.0", directoryPath);
                Utils.RunCommand("dotnet", "tool install --global dotnet-ef", directoryPath);

                if(!Utils.RunCommand("dotnet", $"ef dbcontext scaffold {DataBaseURL} Pomelo.EntityFrameworkCore.MySql  -f -c {ProjectInfo.ProjectName}DbContext", directoryPath))
                {
                    Console.WriteLine("models not created");
                }

                Utils.RunCommand("dotnet", $"add {ProjectInfo.ProjectName}.csproj package Swashbuckle.AspNetCore -v 6.6.2\r\n", directoryPath);

                Utils.CreateFile(Path.Combine(directoryPath, "Program.cs"), serverCode, "Program.cs");
                Utils.CreateFile(Path.Combine(directoryPath, "appsettings.json"), appSettingsCode, "appSettings");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                return false;
            }

            return true;
        }
    }
}
